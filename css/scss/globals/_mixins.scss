// Mixins

// Breakpoint
@mixin bp($point) {
  @if map-has-key($breakpoints, $point) {
    @media #{inspect(map-get($breakpoints, $point))} {
      @content;
    }
  }
  @else {
    @warn "Couldn't find a breakpoint named `#{$point}`.";
  }
}

// Inline-Block IE
@mixin inline-block {
  display: inline-block;
  @if $support-legacy {
    *zoom: 1;
    *display: inline;
    *vertical-align: auto;
  }
}

// Margin
@mixin margin($top: 0, $right: null, $bottom: null, $left: null) {
  margin: $top $right $bottom $left;
}

// Padding
@mixin padding($top: 0, $right: null, $bottom: null, $left: null) {
  padding: $top $right $bottom $left;
}

// Sizing
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Calc
@mixin calc($prop, $expression, $fallback: null) {
  @if $support-legacy {
    #{$prop}: $fallback;
  }
  #{$prop}: -webkit-calc(#{$expression});
  #{$prop}: calc(#{$expression});
}

// Rem Mixin
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*$base-font-reset/10};

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value/10}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  @if $support-legacy {
    #{$property}: $pxValues;
  }
  #{$property}: $remValues;
}

// Font Family Mixin
@mixin font($font, $style: normal, $weight: normal) {
  font-family: $font, Helvetica, Arial, sans-serif;
  font-style:  $style;
  font-weight: $weight;
}

@mixin font-family($font, $size: $base-font-size, $style: normal, $weight: normal) {
  font-family: $font,Arial,Sans-Serif;
  font-style: $style;
  font-weight: $weight;
}

// Font Size
@mixin font-size($value: $base-font-size, $base: $base-font-size) {
  @if not unitless($value) {
    $value: strip-units($value);
  }
  @if $support-legacy {
    font-size: $value * 1px;
  }
  font-size: ($value / $base) *1rem;
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Word Wrap
@mixin word-wrap() {
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@mixin clearfix() {
  zoom: 1;
  &:before,
  &:after {
    display: table;
    content: ' ';
    line-height: 0;
  }
  &:after {
    clear: both;
  }
}

// Top, Right, Bottom, Left
$trbl-position: null !default;
@mixin trbl($top: $trbl-position, $right: $trbl-position, $bottom: $trbl-position, $left: $trbl-position) {
  @each $data in top $top, right $right, bottom $bottom, left $left {
    #{nth($data, 1)}: nth($data, 2);
  }
}

// Margin
@mixin margin($top: 0, $right: null, $bottom: null, $left: null) {
  margin: $top $right $bottom $left;
}

// Flexbox
@mixin flexbox() {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  @if $support-legacy {
    $opacity-ie: ($opacity * 100);
    filter: #{alpha(opacity=$opacity-ie)};
  }
}

// Background Clip
@mixin background-clip($type: padding-box) {
  background-clip: $type;
}

// Border Radius
@mixin border-radius($radius: $border-radius) {
  border-radius: $radius;
  @include background-clip;
}

// RGBa Colors w/Fallback
@mixin rgba($color, $alpha: $site-alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background: $rgba;
  @if $support-legacy {
    .ie & {
      background: transparent;
      -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str}, endColorstr=#{$ie-hex-str})";
      filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
      zoom: 1
    }
  }
}

// Background Gradients
@mixin background-gradient($from-color, $to-color) {
    background-color: mix($from-color, $to-color); /* Fallback */
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from-color), to($to-color));
    background-image: -webkit-linear-gradient(top, $from-color, $to-color);
    background-image: -moz-linear-gradient(top, $from-color, $to-color);
    background-image: -ms-linear-gradient(top, $from-color, $to-color);
    background-image: -o-linear-gradient(top, $from-color, $to-color);
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$from-color}', EndColorStr='#{$to-color}')";
}

@mixin horizontal-gradient($startColor, $to, $endColor: 100%) {
  /* fallback/image non-cover color */
  background-color: $startColor;
  background-image: -moz-linear-gradient(left, $startColor 0%, $to $endColor);
  background-image: -webkit-gradient(linear, left top, right top, color-stop(0%, $startColor), color-stop($endColor, $to));
  background-image: -webkit-linear-gradient(left, $startColor 0%, $to $endColor);
  background-image: -o-linear-gradient(left, $startColor 0%, $to $endColor);
  background: -ms-linear-gradient(left, $startColor 0%, $to $endColor);
  background: linear-gradient(to right, $startColor 0%, $to $endColor);
}

// Box-Shadow
@mixin box-shadow($value: 0 1px 2px 0 #888) {
  box-shadow: $value;
}

// Vertical Align
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

// Horizontal Align
@mixin center {
  position: relative;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}

@mixin coverer($position: absolute) {
  position: $position;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// Center an element vertically and horizontally
@mixin centerer($position: absolute) {
  position: $position;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}

// placeholder from Horizontal Align
%center {
  @include center;
}

// Transform
@mixin rotate($degrees) {
  @if not unitless($degrees) {
    $degrees: strip-units($degrees);
  }
  will-change: transform;
  transform: rotate($degrees * 1deg);
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  filter: progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  zoom: 1;
}

// Transitions
@mixin transition($what: all, $length: .2s, $easing: ease-in-out) {
  will-change: transition;
  transition: $what $length $easing;
}

// Column Count
@mixin columns($count: 3, $gap: $site-gutter-width) {
  -webkit-column-count: $count;
  -moz-column-count: $count;
  column-count: $count;
  -webkit-column-gap: $gap;
  -moz-column-gap: $gap;
  column-gap: $gap;
}

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder {@content}
  ::-moz-placeholder {@content}
  :-ms-input-placeholder {@content}
}

// Responsive Images
@mixin image-2x($image, $w: 100%, $h: auto) {
  @media
  (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $w $h;
  }
}

// Accessibly hide content
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  @include margin(-1em);
  @include padding;
  border: 0;
  clip: rect(0 0 0 0);
  overflow: hidden;
}
